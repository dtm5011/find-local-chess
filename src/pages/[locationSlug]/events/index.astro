---
import { getCollection } from 'astro:content';
import BaseLayout from '../../../layouts/BaseLayout.astro';

export async function getStaticPaths() {
  const locations = await getCollection('locations');
  const events = await getCollection('events');

  const staticPaths = [];

  for (const location of locations) {
    staticPaths.push({
      params: { locationSlug: location.slug },
      props: { location },
    });
  }
  return staticPaths;
}

const { locationSlug } = Astro.params;
const { location } = Astro.props;

const allEvents = await getCollection('events');
const locationEvents = allEvents.filter(event => event.data.locationSlug === locationSlug);

// Group events by day of the week
const eventsByDay = locationEvents.reduce((acc, event) => {
  const day = event.data.day;
  if (!acc[day]) {
    acc[day] = [];
  }
  acc[day].push(event);
  return acc;
}, {});

const daysOrder = [
  'Monday',
  'Tuesday',
  'Wednesday',
  'Thursday',
  'Friday',
  'Saturday',
  'Sunday',
];

const sortedDays = Object.keys(eventsByDay).sort(
  (a, b) => daysOrder.indexOf(a) - daysOrder.indexOf(b)
);
---

<BaseLayout title={`Chess Events in ${location.data.name}`}>
  <div>
    <section>
      <h1>Events in {location.data.name}</h1>
      
      <div>
        {allEvents.length > 0 ? (
          allEvents.map(event => (
            <a href={`/${location.slug}/events/${event.slug.split('/').slice(1).join('/')}`}>
              <h3>{event.data.title}</h3>
              <p>{event.data.date.toDateString()}</p>
              <p>{event.data.location}</p>
            </a>
          ))
        ) : (
          <p>No upcoming events in this location. Check back soon!</p>
        )}
      </div>
    </section>
  </div>
</BaseLayout>