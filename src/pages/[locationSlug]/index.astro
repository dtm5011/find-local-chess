---
import { getCollection, getEntry } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';

export async function getStaticPaths() {
  const allLocations = await getCollection('locations');
  return allLocations.map(location => ({
    params: { locationSlug: location.slug },
    props: { location },
  }));
}

const { location } = Astro.props;
const allEvents = await getCollection('events', ({ data }) => data.locationSlug === location.slug);

// Group events by dayOfWeek
const eventsByDay = allEvents.reduce((acc, event) => {
  const { dayOfWeek } = event.data;
  if (!acc[dayOfWeek]) {
    acc[dayOfWeek] = [];
  }
  acc[dayOfWeek].push(event);
  return acc;
}, {});

const orderedDays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
const sortedDays = Object.keys(eventsByDay).sort((a, b) => orderedDays.indexOf(a) - orderedDays.indexOf(b));
---

<BaseLayout title={`Chess Events in ${location.data.name}`}>
  <div class="container">
    <header class="location-header">
      <h1>{location.data.name}</h1>
      <p>{location.data.description}</p>
    </header>

    <div class="events-grid">
      {sortedDays.map(day => (
        <section class="day-section">
          <h2>{day}</h2>
          <div class="events-list">
            {eventsByDay[day].map(event => (
              <a href={`/find-local-chess/${location.slug}/events/${event.slug}`} class="event-card-link">
                <wa-card class="event-card">
                  <h3 slot="header">{event.data.title}</h3>
                  <p>{event.data.startTime}{event.data.endTime ? ` - ${event.data.endTime}` : ''}</p>
                  <p>{event.data.venue}</p>
                  <div class="tags">
                    {event.data.tags?.map(tag => <wa-tag>{tag}</wa-tag>)}
                  </div>
                </wa-card>
              </a>
            ))}
          </div>
        </section>
      ))}
    </div>
  </div>
</BaseLayout>

<style>
  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
  }

  .location-header {
    text-align: center;
    margin-bottom: 3rem;
  }

  .events-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
  }

  .day-section h2 {
    border-bottom: 2px solid var(--wa-color-primary);
    padding-bottom: 0.5rem;
    margin-bottom: 1.5rem;
  }

  .events-list {
    display: grid;
    gap: 1.5rem;
  }

  .event-card-link {
    text-decoration: none;
    color: inherit;
    display: block;
  }

  .event-card {
    transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
  }

  .event-card:hover {
    transform: translateY(-5px);
    box-shadow: var(--wa-shadow-l);
  }

  .event-card h3 {
    margin: 0 0 0.5rem 0;
  }

  .event-card p {
    margin: 0.25rem 0;
  }

  .tags {
    margin-top: 1rem;
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }
</style>
