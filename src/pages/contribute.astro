---
import BaseLayout from '../layouts/BaseLayout.astro';
---

<BaseLayout title="Contribute Events - Find Local Chess">
  <div class="container">
    <section class="hero">
      <h1>Contribute an Event</h1>
      <p>
        Know about a local chess event? Fill out the form below to add it to our list.
      </p>
    </section>

    <wa-card>
      <h2 slot="header">Event Details</h2>
      <form id="event-form">
        <div class="grid-2-col">
          <div>
            <wa-input label="Event Name" id="title" required></wa-input>
            <wa-select label="Day of the Week" id="dayOfWeek" required>
              <wa-option value="Monday">Monday</wa-option>
              <wa-option value="Tuesday">Tuesday</wa-option>
              <wa-option value="Wednesday">Wednesday</wa-option>
              <wa-option value="Thursday">Thursday</wa-option>
              <wa-option value="Friday">Friday</wa-option>
              <wa-option value="Saturday">Saturday</wa-option>
              <wa-option value="Sunday">Sunday</wa-option>
            </wa-select>
            <wa-select label="Recurrence" id="recurrence">
              <wa-option value="">None</wa-option>
              <wa-option value="weekly">Weekly</wa-option>
              <wa-option value="bi-weekly">Bi-Weekly</wa-option>
              <wa-option value="monthly">Monthly</wa-option>
              <wa-option value="first-of-month">First of the Month</wa-option>
              <wa-option value="last-of-month">Last of the Month</wa-option>
            </wa-select>
            <wa-input type="time" label="Start Time" id="startTime" required></wa-input>
            <wa-input type="time" label="End Time" id="endTime"></wa-input>
            <wa-input label="Venue" id="venue" required></wa-input>
            <wa-input label="Location Slug" id="locationSlug" required placeholder="e.g., san-diego"></wa-input>
          </div>
          <div>
            <wa-input label="Organizer" id="organizer"></wa-input>
            <wa-input label="Website URL" id="link"></wa-input>
            <wa-input label="Contact" id="contact"></wa-input>
            <wa-select label="Tags" id="tags" multiple clearable>
              <wa-option value="tournament">Tournament</wa-option>
              <wa-option value="casual">Casual</wa-option>
              <wa-option value="blitz">Blitz</wa-option>
              <wa-option value="rapid">Rapid</wa-option>
              <wa-option value="classical">Classical</wa-option>
              <wa-option value="scholastic">Scholastic</wa-option>
              <wa-option value="online">Online</wa-option>
            </wa-select>
          </div>
        </div>
        <wa-textarea label="Description" id="description" required></wa-textarea>
        <wa-button type="submit">Submit Event</wa-button>
      </form>
      <div id="error-message" style="color: red; margin-top: 1rem;"></div>
    </wa-card>
  </div>
</BaseLayout>

<script>
  import { parse } from 'valibot';
  import EventSchema from '../lib/schema.ts';

  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('event-form') as HTMLFormElement;
    const errorMessage = document.getElementById('error-message');
    const card = document.querySelector('wa-card');

    if (form) {
      form.addEventListener('submit', async (event) => {
        event.preventDefault();
        if (!errorMessage) return;
        errorMessage.textContent = '';

        const getFieldValue = (id: string) => {
          const element = document.getElementById(id) as any;
          if (!element) return undefined;
          if (id === 'recurrence' && element.value === '') return undefined;
          return element.value;
        };

        const getSelectValues = (id: string) => {
          const element = document.getElementById(id) as any;
          return element ? element.value : [];
        };

        const formData = {
          title: getFieldValue('title'),
          dayOfWeek: getFieldValue('dayOfWeek'),
          recurrence: getFieldValue('recurrence'),
          startTime: getFieldValue('startTime'),
          endTime: getFieldValue('endTime'),
          venue: getFieldValue('venue'),
          description: getFieldValue('description'),
          organizer: getFieldValue('organizer'),
          link: getFieldValue('link'),
          contact: getFieldValue('contact'),
          tags: getSelectValues('tags'),
          locationSlug: getFieldValue('locationSlug'),
        };

        try {
          const validatedData = parse(EventSchema, formData);

          const body = new URLSearchParams();
          for (const key in validatedData) {
            const value = (validatedData as any)[key];
            if (Array.isArray(value)) {
              value.forEach(item => body.append(key, item));
            } else if (value !== undefined) {
              body.append(key, value);
            }
          }

          

          const response = await fetch('/api/create-event', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: body,
          });

          if (response.ok) {
            if (card) {
              card.innerHTML = `
                <h2 slot="header">Submission Successful!</h2>
                <p>Your event has been submitted for review.</p>
              `;
            }
          } else {
            const errorData = await response.json();
            if (errorMessage) {
              errorMessage.textContent = errorData.message;
            }
          }
        } catch (error: any) {
          if (errorMessage) {
            if (error.issues) {
              errorMessage.textContent = error.issues.map((issue: any) => issue.message).join(', ');
            } else {
              errorMessage.textContent = 'An unexpected error occurred. Please try again.';
            }
          }
        }
      });
    }
  });
</script>

<style>
  .hero {
    text-align: center;
    padding: 4rem 0;
  }

  .grid-2-col {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
  }

  wa-card {
    background-color: var(--wa-color-surface-raised);
    border: 1px solid var(--wa-color-surface-border);
    box-shadow: var(--wa-shadow-s);
    padding: 2rem;
  }

  form > * + * {
    margin-top: 1rem;
  }
</style>